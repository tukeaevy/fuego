name: Build check

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "*" # We don't want this to run on release
  pull_request:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-2022
    env:

      BOOST_ROOT: C:\thirdparties\boost-1.83.0

    steps:
      - uses: actions/checkout@v4

      - name: Prepare version
        shell: powershell
        id: setup
        run: |
          $os="windows"
          $xfg_version="${{ github.sha }}".SubString(0,7)
          $release_name="xfg-cli-$os-dev-$xfg_version"
          echo "release_name=${release_name}" >> $env:GITHUB_OUTPUT

      - name: Install msbuild
        uses: microsoft/setup-msbuild@v1.1


      - name: Install dependencies (Windows)
        shell: pwsh
        run: |
          # Install basic tools
          choco install -y ninja
          
          # Initialize vcpkg if not already done
          if (-not (Test-Path "C:/vcpkg/vcpkg.exe")) {
            git clone https://github.com/Microsoft/vcpkg.git C:/vcpkg
            cd C:/vcpkg
            .\bootstrap-vcpkg.bat
            .\vcpkg integrate install
          }
          
          # Install packages via vcpkg
          C:/vcpkg/vcpkg.exe install --triplet x64-windows `
            boost-filesystem boost-thread boost-date-time boost-chrono `
            boost-regex boost-serialization boost-program-options `
            boost-multi-index boost-uuid boost-asio boost-scope-exit `
            boost-format icu openssl miniupnpc
    
      - name: Build
        shell: powershell
        id: build
        run: |
          $build_folder = "build"
          $sha = "${{ github.sha }}"
          $xfg_ver = $sha.SubString(0,7)
          $release_name = "fuego-cli-win64-v$xfg_ver"
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release `
                -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" `
                -DCMAKE_POLICY_DEFAULT_CMP0167=OLD ..
          cmake --build . --parallel
          cd src
          Compress-Archive -Path *.exe -DestinationPath "$release_name.zip"
          $sha256 = (Get-FileHash "$release_name.zip").Hash
          $asset_path = "./$build_folder/src/$release_name.zip"
          mkdir "$release_name"
          cp *.exe "$release_name/"
          echo "sha256=${sha256}" >> $env:GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $env:GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $env:GITHUB_OUTPUT
          echo "xfg_version=${xfg_ver}" >> $env:GITHUB_OUTPUT
          echo "artifact_path=$build_folder/src/$release_name" >> $env:GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu22:
    name: Ubuntu 22.04
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build pkg-config \
               libssl-dev libminiupnpc-dev libqrencode-dev libudev-dev \
               libunwind-dev liblzma-dev qtbase5-dev qtbase5-dev-tools \
               libicu-dev libboost-all-dev
          build_folder="build/debug"
          xfg_ver=${GITHUB_SHA::7}
          xfg_ver_folder=$(echo $xfg_ver | sed 's/\.//g')
          release_name=fuego-cli-ubuntu-2204-dev"$xfg_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../.. -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_POLICY_DEFAULT_CMP0167=OLD
          ninja -j$(nproc)
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "artifact_path=$build_folder/$release_name" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu24:
    name: Ubuntu 24.04
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev
          build_folder="build/debug"
          xfg_ver=${GITHUB_SHA::7}
          xfg_ver_folder=$(echo $xfg_ver | sed 's/\.//g')
          release_name=fuego-cli-ubuntu-2404-dev"$xfg_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../.. -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_POLICY_DEFAULT_CMP0167=OLD
          ninja -j$(nproc)
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "artifact_path=$build_folder/$release_name" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: intel
            arch_flag: x86_64
          - os: macos-14
            arch: apple
            arch_flag: arm64
          - os: macos-15
            arch: apple
            arch_flag: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        run: |
          build_folder="build/"
          xfg_ver=${GITHUB_SHA::7}
          release_name=fuego-cli-macos-${{ matrix.arch }}-dev"$xfg_ver"

          brew update
          brew install ninja boost qt@5 miniupnpc qrencode icu4c
          
          # Set environment variables for Boost and ICU
          export BOOST_ROOT=$(brew --prefix boost)
          
          # Try different ICU versions
          if [ -d "$(brew --prefix)/opt/icu4c" ]; then
            ICU_PREFIX="$(brew --prefix)/opt/icu4c"
          elif [ -d "$(brew --prefix)/opt/icu4c@77" ]; then
            ICU_PREFIX="$(brew --prefix)/opt/icu4c@77"
          elif [ -d "$(brew --prefix)/opt/icu4c@76" ]; then
            ICU_PREFIX="$(brew --prefix)/opt/icu4c@76"
          else
            ICU_PREFIX="$(brew --prefix icu4c)"
          fi
          
          export ICU_ROOT="$ICU_PREFIX"
          export PATH="$ICU_PREFIX/bin:$PATH"
          export PKG_CONFIG_PATH="$ICU_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
          export LDFLAGS="-L$ICU_PREFIX/lib"
          export CPPFLAGS="-I$ICU_PREFIX/include"
          
          export CC=clang
          export CXX=clang++

          mkdir "$build_folder"
          cd "$build_folder"
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch_flag }} \
            -DBOOST_ROOT="$BOOST_ROOT" \
            -DICU_ROOT="$ICU_ROOT" \
            -DCMAKE_PREFIX_PATH="$ICU_ROOT" \
            -DCMAKE_C_FLAGS="-mmacosx-version-min=10.12" \
            -DCMAKE_CXX_FLAGS="-mmacosx-version-min=10.12 -Wno-unknown-warning-option" \
            -DCMAKE_POLICY_DEFAULT_CMP0167=OLD
          ninja -j$(sysctl -n hw.ncpu)
          mkdir "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && strip "$f" && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          zip -r "$release_name".zip "$release_name"
          sha256=$(shasum -a 256 "$release_name".zip | awk '{print toupper($1)}')
          artifact_path="$build_folder/$release_name"
          asset_path="./$build_folder$release_name.zip"
          echo "sha256=${sha256}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
          echo "xfg_version=${xfg_ver}" >> $GITHUB_OUTPUT
          echo "artifact_path=${artifact_path}" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}-${{ matrix.os }}-${{ matrix.arch }}-${{ github.run_attempt }}-${{ github.job }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
