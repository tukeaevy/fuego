name: Raspberry Pi (ARM64)

on:
  push:
    tags:
      - "*"

jobs:
  build-raspberry-pi:
    name: Raspberry Pi ARM64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # -------------------- Cache --------------------
      - name: Cache Boost ARM64
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: /tmp/boost-arm64
          key: ${{ runner.os }}-boost-arm64-${{ hashFiles('**/CMakeLists.txt') }}

      - name: Cache ICU ARM64
        id: cache-icu
        uses: actions/cache@v4
        with:
          path: /tmp/icu-arm64
          key: ${{ runner.os }}-icu-arm64-${{ hashFiles('**/CMakeLists.txt') }}

      - name: Install ARM64 Cross-Compilation Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential ninja-build pkg-config \
               libssl-dev libminiupnpc-dev libqrencode-dev libudev-dev \
               libunwind-dev liblzma-dev qtbase5-dev qtbase5-dev-tools \
               libicu-dev

      - name: Create Toolchain File
        run: |
          mkdir -p cmake
          cat > cmake/arm64-toolchain.cmake << 'EOF'
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR aarch64)
          set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
          set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF

      - name: Download and Build Boost for ARM64
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
          BOOST_VERSION=1.83.0
          BOOST_VERSION_UNDERSCORE=${BOOST_VERSION//./_}
          BOOST_URL="https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2"
          wget --retry-connrefused --waitretry=5 --timeout=30 --tries=5 -O boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2 "$BOOST_URL"
          file boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2
          if ! file boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2 | grep -q 'bzip2 compressed data'; then
            echo "Downloaded file is not a valid bzip2 archive."
            exit 1
          fi
          tar -xjf boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2
          cd boost_${BOOST_VERSION_UNDERSCORE}
          echo "using gcc : arm : aarch64-linux-gnu-g++ ;" > user-config.jam
          ./bootstrap.sh
          ./b2 --user-config=user-config.jam toolset=gcc-arm target-os=linux architecture=arm address-model=64 --prefix=/tmp/boost-arm64 install
          cd ..

      - name: Patch Boost to fix PTHREAD_STACK_MIN preprocessor issue
        run: |
          # Patch Boost to fix PTHREAD_STACK_MIN preprocessor issue
          BOOST_HEADER="boost/context/posix/stack_traits.hpp"
          if grep -q '#if defined(PTHREAD_STACK_MIN) && (PTHREAD_STACK_MIN > 0)' $BOOST_HEADER; then
            sed -i 's/#if defined(PTHREAD_STACK_MIN) && (PTHREAD_STACK_MIN > 0)/#if defined(PTHREAD_STACK_MIN)/' $BOOST_HEADER
          fi

      - name: Download and Build ICU for ARM64
        if: steps.cache-icu.outputs.cache-hit != 'true'
        run: |
          ICU_VERSION=76.1
          ICU_URL="https://github.com/unicode-org/icu/releases/download/release-${ICU_VERSION//./-}/icu4c-${ICU_VERSION//./_}-src.tgz"
          wget --retry-connrefused --waitretry=5 --timeout=30 --tries=5 -O icu4c-${ICU_VERSION//./_}-src.tgz "$ICU_URL"
          tar -xzf icu4c-${ICU_VERSION//./_}-src.tgz
          cd icu/source
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          export AR=aarch64-linux-gnu-ar
          export RANLIB=aarch64-linux-gnu-ranlib
          export STRIP=aarch64-linux-gnu-strip
          ./configure --host=aarch64-linux-gnu --prefix=/tmp/icu-arm64 --with-cross-build=/usr
          make -j$(nproc)
          make install
          cd ../..

      - name: Build
        id: build
        run: |
          build_folder="build/"
          xfg_ver=$(echo ${{ github.ref }} | sed 's|refs/tags/||')
          release_name="fuego-cli-raspberry-pi-arm64-v$xfg_ver"
          mkdir "$build_folder"
          cd "$build_folder"
          
          # Configure with CMake
          cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/arm64-toolchain.cmake \
                -DBOOST_ROOT=/tmp/boost-arm64 \
                -DICU_ROOT=/tmp/icu-arm64 \
                -DICU_INCLUDE_DIR=/tmp/icu-arm64/include \
                -DICU_DATA_LIBRARY=/tmp/icu-arm64/lib/libicudata.so \
                -DICU_I18N_LIBRARY=/tmp/icu-arm64/lib/libicui18n.so \
                -DICU_UC_LIBRARY=/tmp/icu-arm64/lib/libicuuc.so \
                -DCMAKE_PREFIX_PATH="/tmp/icu-arm64" \
                -DCMAKE_BUILD_TYPE=Release \
                -G Ninja ..
          
          # Build with Ninja
          ninja -j$(nproc)
          
          # Create release package
          mkdir "$release_name"
          exeFiles=()
          for f in src/*; do 
            if [[ -x $f && -f $f ]]; then
              aarch64-linux-gnu-strip "$f"
              exeFiles+=( "$f" )
            fi
          done
          cp "${exeFiles[@]}" "$release_name/"
          tar -czf "$release_name".tar.gz "$release_name"
          sha256=$(sha256sum "$release_name".tar.gz | awk '{print toupper($1)}')
          asset_path="./$build_folder$release_name.tar.gz"
          echo "sha256=${sha256}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
          echo "xfg_version=${xfg_ver}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.build.outputs.asset_path }}
          name: Fuego CLI Suite v${{ steps.build.outputs.xfg_version }}
          body: |
            üçì [Download for Raspberry Pi](../../releases/download/${{ steps.build.outputs.xfg_version }}/${{ steps.build.outputs.release_name }}) **${{ steps.build.outputs.release_name }}**
            
            `SHA256 : ${{ steps.build.outputs.sha256 }}`
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

