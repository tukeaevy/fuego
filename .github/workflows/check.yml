name: Build check

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "*" # We don't want this to run on release
  pull_request:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-2022
    env:
      BOOST_ROOT: C:\thirdparties\boost-1.83.0
    steps:
      - uses: actions/checkout@v4

      - name: Prepare version
        shell: powershell
        id: setup
        run: |
          $os="windows"
          $xfg_version="${{ github.sha }}".SubString(0,7)
          $release_name="xfg-cli-$os-dev-$xfg_version"
          echo "release_name=${release_name}" >> $env:GITHUB_OUTPUT

      - name: Install msbuild
        uses: microsoft/setup-msbuild@v1.3

      - name: Download and Install Boost 1.83
        run: |
          $Url = "https://github.com/boostorg/boost/releases/download/boost-1.83.0/boost_1_83_0-msvc-14.2-64.exe"
          $OutputPath = "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\boost-installer.exe"
          curl -L $Url -o $OutputPath
          Start-Process -Wait -FilePath $OutputPath "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=C:\\thirdparties\\boost-1.83.0"
    
      - name: Build
        shell: powershell
        id: build
        run: |
          $ErrorActionPreference = "Stop"
          $build_folder = "build"
          $sha = "${{ github.sha }}"
          $xfg_ver = $sha.SubString(0,7)
          $release_name = "fuego-cli-win64-v$xfg_ver"
          mkdir "$build_folder" -Force
          cd "$build_folder"
          cmake -G "Visual Studio 17 2022" -A x64 -DBOOST_ROOT="$env:BOOST_ROOT" -DBOOST_INCLUDE_DIRS="$env:BOOST_ROOT/include" ..
          if ($LASTEXITCODE -ne 0) { throw "CMake configuration failed" }
          msbuild fuegoX.sln /p:Configuration=Release /m /v:minimal
          if ($LASTEXITCODE -ne 0) { throw "Build failed" }
          cd src\Release
          Compress-Archive -Path *.exe -DestinationPath "$release_name.zip"
          $sha256 = (Get-FileHash "$release_name.zip").Hash
          $asset_path = "./$build_folder/src/Release/$release_name.zip"
          mkdir "$release_name" -Force
          cp *.exe "$release_name/"
          echo "sha256=${sha256}" >> $env:GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $env:GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $env:GITHUB_OUTPUT
          echo "xfg_version=${xfg_version}" >> $env:GITHUB_OUTPUT
          echo "artifact_path=$build_folder/src/Release/$release_name" >> $env:GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build-ubuntu24:
    name: Ubuntu 24.04
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-all-dev cmake
          build_folder="build/debug"
          xfg_ver=${GITHUB_SHA::7}
          xfg_ver_folder=$(echo $xfg_ver | sed 's/\.//g')
          release_name=fuego-cli-ubuntu-2404-dev"$xfg_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../.. -DCMAKE_BUILD_TYPE=Debug
          make -j$(nproc)
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "artifact_path=$build_folder/$release_name" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          
  build-ubuntu22:
    name: Ubuntu 22.04
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-all-dev cmake
          build_folder="build/debug"
          xfg_ver=${GITHUB_SHA::7}
          xfg_ver_folder=$(echo $xfg_ver | sed 's/\.//g')
          release_name=fuego-cli-ubuntu-2204-dev"$xfg_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../.. -DCMAKE_BUILD_TYPE=Debug
          make -j$(nproc)
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "artifact_path=$build_folder/$release_name" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-12
            arch: intel
            arch_flag: x86_64
          - os: macos-14
            arch: apple
            arch_flag: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        run: |
          set -e
          build_folder="build/"
          xfg_ver=${GITHUB_SHA::7}
          xfg_ver_folder=$(echo $xfg_ver | sed 's/\.//g')
          release_name=fuego-cli-macos-${{ matrix.arch }}-dev"$xfg_ver"
          brew install gcc boost cmake
          # Ensure Boost development files are properly installed
          brew reinstall boost
          mkdir "$build_folder"
          cd "$build_folder"
          # Set CMAKE_PREFIX_PATH to help CMake find Boost libraries installed via Homebrew
          # Homebrew installs to different paths on Intel vs Apple Silicon Macs
          if [[ "${{ matrix.arch }}" == "apple" ]]; then
            export CMAKE_PREFIX_PATH="/opt/homebrew:$CMAKE_PREFIX_PATH"
          else
            export CMAKE_PREFIX_PATH="/usr/local:$CMAKE_PREFIX_PATH"
          fi
          
          # Debug: Show Boost installation paths
          echo "CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
          find /opt/homebrew /usr/local -name "*boost*" -type d 2>/dev/null | head -10 || true
          echo "Boost library files:"
          find /opt/homebrew /usr/local -name "*boost*" -name "*.dylib" 2>/dev/null | head -10 || true
          echo "Boost CMake files:"
          find /opt/homebrew /usr/local -name "*boost*" -name "*.cmake" 2>/dev/null | head -10 || true
          
          cmake -DCMAKE_C_FLAGS="-mmacosx-version-min=10.12" -DCMAKE_CXX_FLAGS="-mmacosx-version-min=10.12" -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch_flag }} ..
          make -j$(sysctl -n hw.ncpu)
          mkdir "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && strip "$f" && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          zip -r "$release_name".zip "$release_name"
          sha256=$(shasum -a 256 "$release_name".zip | awk '{print toupper($1)}')
          artifact_path="$build_folder/$release_name"
          asset_path="./$build_folder$release_name.zip"
          echo "sha256=${sha256}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
          echo "xfg_version=${xfg_ver}" >> $GITHUB_OUTPUT
          echo "artifact_path=${artifact_path}" >> $GITHUB_OUTPUT


      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
