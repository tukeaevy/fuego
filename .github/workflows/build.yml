name: CI

on:
  push:
    branches: [ master, dynamigo-release-v10 ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]
        build_type: [Release, RelWithDebInfo]

    env:
      CMAKE_BUILD_TYPE: ${{ matrix.build_type }}

    steps:
      - uses: actions/checkout@v4

      # -------------------- Cache --------------------
      - name: Cache packages (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/CMakeLists.txt') }}-${{ matrix.build_type }}

      - name: Cache Homebrew & ICU (macOS)
        if: matrix.os == 'macos-14'
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew/Library/Homebrew/vendor/bundle
            /opt/homebrew/opt/icu4c@77/lib
            /opt/homebrew/opt/icu4c@77/include
          key: ${{ runner.os }}-homebrew-icu-${{ hashFiles('**/CMakeLists.txt') }}-${{ matrix.build_type }}

      - name: Cache vcpkg & Chocolatey (Windows)
        if: matrix.os == 'windows-2022'
        uses: actions/cache@v4
        with:
          path: |
            C:\vcpkg\installed
            C:\ProgramData\chocolatey\lib
          key: ${{ runner.os }}-windows-${{ hashFiles('**/CMakeLists.txt') }}-${{ matrix.build_type }}

      # -------------------- Dependencies --------------------
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build pkg-config \
               libssl-dev libminiupnpc-dev libqrencode-dev libudev-dev \
               libunwind-dev liblzma-dev qtbase5-dev qtbase5-dev-tools \
               libboost-all-dev libicu-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-14'
        run: |
          brew update
          brew install ninja boost qt@5 miniupnpc qrencode icu4c
          echo "BOOST_ROOT=$(brew --prefix boost)" >> $GITHUB_ENV
          echo "ICU_ROOT=$(brew --prefix icu4c)" >> $GITHUB_ENV

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-2022'
        shell: pwsh
        run: |
          choco install -y ninja vcpkg miniupnpc qrencode qt5-default
          vcpkg install --triplet x64-windows boost-filesystem boost-thread boost-date-time `
            boost-chrono boost-regex boost-serialization boost-program-options `
            boost-multi-index boost-uuid boost-asio boost-scope-exit boost-format `
            icu openssl

      # -------------------- Configure & Build --------------------
      - name: Configure
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macos-14" ]; then
            export ICU_ROOT=$(brew --prefix icu4c)
            cmake -S . -B build \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
              -DCMAKE_OSX_ARCHITECTURES=arm64 \
              -DBOOST_ROOT="$BOOST_ROOT" \
              -DICU_ROOT="$ICU_ROOT" \
              -DICU_INCLUDE_DIR="$ICU_ROOT/include" \
              -DICU_DATA_LIBRARY="$ICU_ROOT/lib/libicudata.dylib" \
              -DICU_I18N_LIBRARY="$ICU_ROOT/lib/libicui18n.dylib" \
              -DICU_UC_LIBRARY="$ICU_ROOT/lib/libicuuc.dylib" \
              -DCMAKE_PREFIX_PATH="$ICU_ROOT" \
              -DBoost_USE_STATIC_LIBS=ON \
              -DCMAKE_POLICY_DEFAULT_CMP0167=OLD \
              -DDISABLE_ASYNC_CONSOLE=$([[ "$CMAKE_BUILD_TYPE" == "RelWithDebInfo" ]] && echo ON || echo OFF)
          elif [ "${{ matrix.os }}" = "windows-2022" ]; then
            cmake -S . -B build \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
              -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" \
              -DCMAKE_POLICY_DEFAULT_CMP0167=OLD
          else
            cmake -S . -B build \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
              -DCMAKE_POLICY_DEFAULT_CMP0167=OLD
          fi

      - name: Build
        run: cmake --build build --parallel

      # -------------------- Run Tests --------------------
      - name: Run tests
        if: success()
        run: ctest --test-dir build --output-on-failure

      # -------------------- Upload Artifacts --------------------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fuego-${{ matrix.os }}-${{ matrix.build_type }}-${{ github.sha }}
          path: |
            build/**/fuegod*
            build/**/fuego-wallet-cli*
            build/**/walletd*
            build/**/optimizer*
          retention-days: 30
