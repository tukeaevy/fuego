name: Release Fuego CLI Suite

on:
  push:
    tags:
      - "*"

jobs:
  release-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: intel
            arch_flag: x86_64
            arch_name: intel
          - arch: apple
            arch_flag: arm64
            arch_name: apple
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        # Install Boost and other dependencies
        brew uninstall cmake || true
        brew install boost cmake
        
    - name: Build macOS ${{ matrix.arch_name }}
      run: |
        build_folder="build/"
        xfg_ver=$(echo ${{ github.ref }} | sed 's|refs/tags/||')
        release_name="fuego-cli-macOS-${{ matrix.arch_name }}-v$xfg_ver"
        
        mkdir "$build_folder"
        cd "$build_folder"
        
        # Configure CMake with architecture-specific flags
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_TESTS=OFF \
              -DCMAKE_POLICY_DEFAULT_CMP0167=OLD \
              -DCMAKE_C_FLAGS="-mmacosx-version-min=10.12" \
              -DCMAKE_CXX_FLAGS="-mmacosx-version-min=10.12" \
              -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch_flag }} \
              ..
        
        # Build
        make -j$(sysctl -n hw.ncpu)
        
        # Create release package
        mkdir "$release_name"
        
        # Copy and strip executables
        exeFiles=()
        for f in src/*; do 
          if [[ -x $f && -f $f ]]; then
            strip "$f"
            exeFiles+=("$f")
          fi
        done
        cp "${exeFiles[@]}" "$release_name/"
        
        # Create zip archive
        zip -r "$release_name.zip" "$release_name"
        
        # Calculate SHA256
        sha256=$(shasum -a 256 "$release_name.zip" | awk '{print toupper($1)}')
        
        # Set outputs
        echo "sha256=$sha256" >> $GITHUB_OUTPUT
        echo "release_name=$release_name.zip" >> $GITHUB_OUTPUT
        echo "asset_path=./$build_folder$release_name.zip" >> $GITHUB_OUTPUT
        echo "arch_name=${{ matrix.arch_name }}" >> $GITHUB_OUTPUT
        
    - name: Upload macOS ${{ matrix.arch_name }} artifact
      uses: actions/upload-artifact@v4
      with:
        name: fuego-cli-macOS-${{ matrix.arch_name }}-v${{ github.ref_name }}
        path: build/fuego-cli-macOS-${{ matrix.arch_name }}-v${{ github.ref_name }}.zip

  release-ubuntu-22:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libboost-all-dev libssl-dev libgtest-dev
        
    - name: Build Ubuntu 22.04
      run: |
        build_folder="build/"
        xfg_ver=$(echo ${{ github.ref }} | sed 's|refs/tags/||')
        release_name="fuego-cli-ubuntu-2204-v$xfg_ver"
        
        mkdir "$build_folder"
        cd "$build_folder"
        
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DCMAKE_POLICY_DEFAULT_CMP0167=OLD ..
        make -j$(nproc)
        
        # Create release package
        mkdir "$release_name"
        
        # Copy and strip executables
        exeFiles=()
        for f in src/*; do 
          if [[ -x $f && -f $f ]]; then
            strip "$f"
            exeFiles+=("$f")
          fi
        done
        cp "${exeFiles[@]}" "$release_name/"
        
        # Create tar.gz archive
        tar -czf "$release_name.tar.gz" "$release_name"
        
        # Calculate SHA256
        sha256=$(sha256sum "$release_name.tar.gz" | awk '{print toupper($1)}')
        
        # Set outputs
        echo "sha256=$sha256" >> $GITHUB_OUTPUT
        echo "release_name=$release_name.tar.gz" >> $GITHUB_OUTPUT
        echo "asset_path=./$build_folder$release_name.tar.gz" >> $GITHUB_OUTPUT
        
    - name: Upload Ubuntu 22.04 artifact
      uses: actions/upload-artifact@v4
      with:
        name: fuego-cli-ubuntu-2204-v${{ github.ref_name }}
        path: build/fuego-cli-ubuntu-2204-v${{ github.ref_name }}.tar.gz

  release-ubuntu-24:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libboost-all-dev libssl-dev libgtest-dev
        
    - name: Build Ubuntu 24.04
      run: |
        build_folder="build/"
        xfg_ver=$(echo ${{ github.ref }} | sed 's|refs/tags/||')
        release_name="fuego-cli-ubuntu-2404-v$xfg_ver"
        
        mkdir "$build_folder"
        cd "$build_folder"
        
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DCMAKE_POLICY_DEFAULT_CMP0167=OLD ..
        make -j$(nproc)
        
        # Create release package
        mkdir "$release_name"
        
        # Copy and strip executables
        exeFiles=()
        for f in src/*; do 
          if [[ -x $f && -f $f ]]; then
            strip "$f"
            exeFiles+=("$f")
          fi
        done
        cp "${exeFiles[@]}" "$release_name/"
        
        # Create tar.gz archive
        tar -czf "$release_name.tar.gz" "$release_name"
        
        # Calculate SHA256
        sha256=$(sha256sum "$release_name.tar.gz" | awk '{print toupper($1)}')
        
        # Set outputs
        echo "sha256=$sha256" >> $GITHUB_OUTPUT
        echo "release_name=$release_name.tar.gz" >> $GITHUB_OUTPUT
        echo "asset_path=./$build_folder$release_name.tar.gz" >> $GITHUB_OUTPUT
        
    - name: Upload Ubuntu 24.04 artifact
      uses: actions/upload-artifact@v4
      with:
        name: fuego-cli-ubuntu-2404-v${{ github.ref_name }}
        path: build/fuego-cli-ubuntu-2404-v${{ github.ref_name }}.tar.gz

  release-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        # Install Visual Studio Build Tools
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools" -y
        choco install cmake -y
        # Install boost via Chocolatey
        choco install boost-msvc-14.3 -y || choco install boost -y
        # Refresh environment variables
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        
    - name: Build Windows
      run: |
        $buildFolder = "build/"
        $xfgVer = $env:GITHUB_REF -replace "refs/tags/", ""
        $releaseName = "fuego-cli-win64-v$xfgVer"
        
        New-Item -ItemType Directory -Path $buildFolder -Force
        Set-Location $buildFolder
        
        # Configure CMake
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DCMAKE_POLICY_DEFAULT_CMP0167=OLD -DBoost_NO_BOOST_CMAKE=ON -DBOOST_ROOT=C:\tools\boost ..
        
        # Build
        cmake --build . --config Release --parallel
        
        # Create release package
        New-Item -ItemType Directory -Path $releaseName -Force
        
        # Copy executables
        $exeFiles = Get-ChildItem -Path "src\*" -File | Where-Object { $_.Extension -eq ".exe" }
        foreach ($file in $exeFiles) {
          Copy-Item $file.FullName -Destination "$releaseName/"
        }
        
        # Create zip archive
        Compress-Archive -Path "$releaseName/*" -DestinationPath "$releaseName.zip"
        
        # Calculate SHA256
        $sha256 = (Get-FileHash "$releaseName.zip" -Algorithm SHA256).Hash.ToUpper()
        
        # Set outputs
        echo "sha256=$sha256" >> $env:GITHUB_OUTPUT
        echo "release_name=$releaseName.zip" >> $env:GITHUB_OUTPUT
        echo "asset_path=./$buildFolder$releaseName.zip" >> $env:GITHUB_OUTPUT
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: fuego-cli-win64-v${{ github.ref_name }}
        path: build/fuego-cli-win64-v${{ github.ref_name }}.zip

  create-release:
    needs: [release-macos, release-ubuntu-22, release-ubuntu-24, release-windows]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/fuego-cli-macOS-intel-v${{ github.ref_name }}/fuego-cli-macOS-intel-v${{ github.ref_name }}.zip
          ./artifacts/fuego-cli-macOS-apple-v${{ github.ref_name }}/fuego-cli-macOS-apple-v${{ github.ref_name }}.zip
          ./artifacts/fuego-cli-ubuntu-2204-v${{ github.ref_name }}/fuego-cli-ubuntu-2204-v${{ github.ref_name }}.tar.gz
          ./artifacts/fuego-cli-ubuntu-2404-v${{ github.ref_name }}/fuego-cli-ubuntu-2404-v${{ github.ref_name }}.tar.gz
          ./artifacts/fuego-cli-win64-v${{ github.ref_name }}/fuego-cli-win64-v${{ github.ref_name }}.zip
        name: Fuego CLI Suite v${{ github.ref_name }}
        body: |
          ## Fuego CLI Suite v${{ github.ref_name }}
          
          ### Downloads
          
          üçè **macOS (Intel)** - [fuego-cli-macOS-intel-v${{ github.ref_name }}.zip](../../releases/download/${{ github.ref_name }}/fuego-cli-macOS-intel-v${{ github.ref_name }}.zip)
          
          üçè **macOS (Apple Silicon)** - [fuego-cli-macOS-apple-v${{ github.ref_name }}.zip](../../releases/download/${{ github.ref_name }}/fuego-cli-macOS-apple-v${{ github.ref_name }}.zip)
          
          üêß **Ubuntu 22.04** - [fuego-cli-ubuntu-2204-v${{ github.ref_name }}.tar.gz](../../releases/download/${{ github.ref_name }}/fuego-cli-ubuntu-2204-v${{ github.ref_name }}.tar.gz)
          
          üêß **Ubuntu 24.04** - [fuego-cli-ubuntu-2404-v${{ github.ref_name }}.tar.gz](../../releases/download/${{ github.ref_name }}/fuego-cli-ubuntu-2404-v${{ github.ref_name }}.tar.gz)
          
          ü™ü **Windows** - [fuego-cli-win64-v${{ github.ref_name }}.zip](../../releases/download/${{ github.ref_name }}/fuego-cli-win64-v${{ github.ref_name }}.zip)
          
          ### Installation
          
          **macOS**: Extract the zip file and run the executables from Terminal
          
          **Linux**: Extract the tar.gz file and run the executables
          
          **Windows**: Extract the zip file and run the executables from Command Prompt or PowerShell
          
          ### Verification
          
          All artifacts are signed and include SHA256 checksums for verification.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
