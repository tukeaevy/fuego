# Release workflow that creates GitHub releases with bundled artifacts

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]

    env:
      CMAKE_BUILD_TYPE: Release

    steps:
      - uses: actions/checkout@v4

      # -------------------- Cache Dependencies --------------------
      - name: Cache apt packages (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Cache Homebrew packages (macOS)
        if: matrix.os == 'macos-14'
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew/Library/Homebrew/vendor/bundle
          key: ${{ runner.os }}-homebrew-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: Cache vcpkg packages (Windows)
        if: matrix.os == 'windows-2022'
        uses: actions/cache@v4
        with:
          path: C:\vcpkg\installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Cache Chocolatey packages (Windows)
        if: matrix.os == 'windows-2022'
        uses: actions/cache@v4
        with:
          path: C:\ProgramData\chocolatey\lib
          key: ${{ runner.os }}-choco-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-choco-

      # -------------------- Linux --------------------
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build pkg-config \
               libssl-dev libminiupnpc-dev libqrencode-dev libudev-dev \
               libunwind-dev liblzma-dev qtbase5-dev qtbase5-dev-tools \
               libboost-all-dev libicu-dev

      # -------------------- macOS --------------------
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-14'
        run: |
          brew install ninja boost qt@5 miniupnpc qrencode icu4c
          echo "BOOST_ROOT=$(brew --prefix boost)" >> $GITHUB_ENV
          echo "ICU_ROOT=$(brew --prefix icu4c)" >> $GITHUB_ENV

      # -------------------- Windows --------------------
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-2022'
        shell: pwsh
        run: |
          choco install -y ninja
          choco install -y vcpkg
          choco install -y miniupnpc qrencode
          choco install -y qt5-default --params '/InstallDir:C:\Qt'
          vcpkg install boost-filesystem boost-thread boost-date-time boost-chrono boost-regex boost-serialization boost-program-options boost-multi-index boost-foreach boost-uuid boost-asio boost-scope-exit boost-format --triplet x64-windows

      # -------------------- Cache CMake Build --------------------
      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/CMakeCache.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      # -------------------- Configure & Build --------------------
      - name: Configure
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "macos-14" ]; then
            cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
                  -DCMAKE_OSX_ARCHITECTURES=arm64 -DBOOST_ROOT="$BOOST_ROOT" \
                  -DCMAKE_PREFIX_PATH="$ICU_ROOT"
          elif [ "${{ matrix.os }}" == "windows-2022" ]; then
            cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
                  -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake"
          else
            cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
                  -DBOOST_ROOT="$BOOST_ROOT"
          fi

      - name: Build
        run: cmake --build build --parallel

      # -------------------- Bundle Shared Libraries --------------------
      - name: Bundle Linux artifacts
        if: matrix.os == 'ubuntu-22.04' && success()
        run: |
          chmod +x scripts/bundle_linux.sh
          ./scripts/bundle_linux.sh build fuego-linux-bundle

      - name: Bundle macOS artifacts
        if: matrix.os == 'macos-14' && success()
        run: |
          chmod +x scripts/bundle_macos.sh
          ./scripts/bundle_macos.sh build fuego-macos-bundle

      - name: Bundle Windows artifacts
        if: matrix.os == 'windows-2022' && success()
        shell: pwsh
        run: |
          ./scripts/bundle_windows.ps1 -BuildDir build -OutputDir fuego-windows-bundle

      # -------------------- Upload Artifacts --------------------
      - name: Upload macOS bundle
        if: matrix.os == 'macos-14' && success()
        uses: actions/upload-artifact@v4
        with:
          name: fuego-macos-bundle
          path: fuego-macos-bundle/
          retention-days: 30

      - name: Upload Windows bundle
        if: matrix.os == 'windows-2022' && success()
        uses: actions/upload-artifact@v4
        with:
          name: fuego-windows-bundle
          path: fuego-windows-bundle/
          retention-days: 30

      - name: Upload Ubuntu bundle
        if: matrix.os == 'ubuntu-22.04' && success()
        uses: actions/upload-artifact@v4
        with:
          name: fuego-linux-bundle
          path: fuego-linux-bundle/
          retention-days: 30

  create-release:
    name: Create Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release archive
        run: |
          mkdir -p release
          
          # Copy Linux bundle
          if [ -d "artifacts/fuego-linux-bundle" ]; then
            cp -r artifacts/fuego-linux-bundle release/fuego-linux-x64-${{ steps.tag.outputs.tag }}
          fi
          
          # Copy macOS bundle
          if [ -d "artifacts/fuego-macos-bundle" ]; then
            cp -r artifacts/fuego-macos-bundle release/fuego-macos-arm64-${{ steps.tag.outputs.tag }}
          fi
          
          # Copy Windows bundle
          if [ -d "artifacts/fuego-windows-bundle" ]; then
            cp -r artifacts/fuego-windows-bundle release/fuego-windows-x64-${{ steps.tag.outputs.tag }}
          fi
          
          # Create compressed archives
          cd release
          for dir in fuego-*; do
            if [ -d "$dir" ]; then
              tar -czf "${dir}.tar.gz" "$dir"
              zip -r "${dir}.zip" "$dir"
            fi
          done
          
          # Create checksums
          sha256sum *.tar.gz *.zip > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Fuego ${{ steps.tag.outputs.tag }}
          body: |
            ## Fuego ${{ steps.tag.outputs.tag }} Release
            
            This release includes portable bundles for all supported platforms with all shared libraries included.
            
            ### Downloads
            
            **Linux (x64)**
            - `fuego-linux-x64-${{ steps.tag.outputs.tag }}.tar.gz` - Portable Linux bundle
            - `fuego-linux-x64-${{ steps.tag.outputs.tag }}.zip` - Portable Linux bundle (ZIP)
            
            **macOS (ARM64)**
            - `fuego-macos-arm64-${{ steps.tag.outputs.tag }}.tar.gz` - Portable macOS bundle
            - `fuego-macos-arm64-${{ steps.tag.outputs.tag }}.zip` - Portable macOS bundle (ZIP)
            
            **Windows (x64)**
            - `fuego-windows-x64-${{ steps.tag.outputs.tag }}.tar.gz` - Portable Windows bundle
            - `fuego-windows-x64-${{ steps.tag.outputs.tag }}.zip` - Portable Windows bundle (ZIP)
            
            ### Installation
            
            Each bundle contains:
            - Executables in `bin/` directory
            - Required shared libraries in `lib/` directory
            - Wrapper scripts for easy execution
            - Installation scripts for system-wide installation
            - README with usage instructions
            
            ### Usage
            
            **Linux/macOS:**
            ```bash
            # Extract the bundle
            tar -xzf fuego-linux-x64-${{ steps.tag.outputs.tag }}.tar.gz
            cd fuego-linux-x64-${{ steps.tag.outputs.tag }}
            
            # Run directly
            ./fuegod --help
            ./fuego-wallet-cli --help
            
            # Or install system-wide
            sudo ./install.sh
            ```
            
            **Windows:**
            ```cmd
            # Extract the bundle
            tar -xzf fuego-windows-x64-${{ steps.tag.outputs.tag }}.tar.gz
            cd fuego-windows-x64-${{ steps.tag.outputs.tag }}
            
            # Run directly
            fuegod.bat --help
            fuego-wallet-cli.bat --help
            
            # Or install system-wide (as Administrator)
            install.bat
            ```
            
            ### Checksums
            
            See `checksums.txt` for SHA256 checksums of all files.
            
            ### Features
            
            - **Dynamic Money Supply System**: Real-time supply adjustment with burn-reborn balance
            - **Dynamic Ring Size**: Enhanced privacy with adaptive ring sizing
            - **Dynamic Multi-Window Difficulty Algorithm (DMWDA)**: Advanced difficulty management
            - **All v10 Block Major Version features**: Activation at height 969,696
            
            ### System Requirements
            
            - **Linux**: x64 architecture, glibc 2.17+
            - **macOS**: 10.15+ (Catalina), Intel or Apple Silicon
            - **Windows**: Windows 10+, x64 architecture
            
            No additional dependencies required - all shared libraries are bundled!
          files: |
            release/*.tar.gz
            release/*.zip
            release/checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}